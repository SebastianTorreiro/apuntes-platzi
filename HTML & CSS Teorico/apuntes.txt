HTML : estructura una pagina web(esqueleto)

CSS: estilos a tu html 

Motores de renderizado:   intermediador entre el codigo y el navegador.

chrome usa blink
edge usa edge html
safari webit

5 pasos:

1ro: pasa los archivos a objetos (DOM(document object model)) osea, el codigo pasado a objetos es el dom

2do: calcula el estilo correspondiente a cada nodo DOM

3ro: calcula las dimensiones de cada nodo y donde va en la pantalla

4rto: pinta las diferentes cajas

5to: tomas las capas y las convierte en una imagen para mostrar en pantalla


----------------------HTML----------------------

html semantico:
		etiquetas con significado, no usar siempre div para todo.

esto ayuda para ser mas accesible tu pagina web, y mejora tu posicionamiento seo
Ok, Google no es el √∫nico, b√°sicamente el significado lo entiende cualquier motor de b√∫squeda, pero convengamos que Google es el m√°s usado.
 Cuando t√∫ buscas algo en Google ves que en los resultados te aparecen varias p√°ginas web, y si t√∫ vas a hacer una p√°gina web ¬°pues tambi√©n vas a querer que la tuya aparezca! 
¬øNo lo crees? Esto hace parte de algo llamado SEO (Search Engine Optimization), es decir, Optimizaci√≥n para Motores de B√∫squeda (que aparezcas en Google pues jaja).
.
Entonces, para poder aparecer en Google, Google necesita entender c√≥mo est√° estructurada tu p√°gina web, de esa forma Google puede darle una navegaci√≥n 
m√°s f√°cil desde la vista de resultados a cualquier persona que encuentre tu p√°gina web mj
Y la forma en la que Google puede entenderlo es b√°sicamente leyendo tu HTML. Y Google lo leer√° por medio de HTML sem√°ntico
.
¬øEso significa que nunca deber√≠a usar <div>? ¬°No! Por supuesto que puedes usar <div>, esta etiqueta es muy √∫til cuando queremos hacer estilos con CSS, por ejemplo. Cuando decimos "no uses <div>"
 nos referimos a que no deber√≠amos usarlo para organizar el contenido de tu p√°gina, porque simplemente Google ignora cualquier <div> mientras lee tu p√°gina. Si t√∫ pones un men√∫ de navegaci√≥n usando 
<div> Google lo va a ignorar, pero si t√∫ pones un men√∫ de navegaci√≥n usando <nav> Google sabr√° que tu p√°gina web tiene un men√∫ de navegaci√≥n (y te tomar√° en cuenta para posicionarte 7u7).
.
En cambio, si t√∫ quieres mostrar un contenido dividido en 2 partes (izquierda y derecha) y usas <div> para hacerlo, entonces est√° s√∫per bien, porque a Google no le importa c√≥mo muestres
(visualmente) tu contenido, as√≠ que en estos casos, <div> nos ayuda mucho cuando queremos hacer cosas visuales con nuestra p√°gina


etiquetas mas usadas en HTML:

LAYOUT:
	header
	nav
	section
	article
	aside
	footer
ENLACES:
	a

TEXTOS: 
	H1...H6
	p
	span
IMAGENES Y VIDEO:
	img
	svg
	iframe
	video
FORMULARIOS:
	FORM
	INPUT
	LABEL
	BUTTON
LISTAS:
	ul
	li
	ol

htmlreference.io   ---->   pagina con todas las etiquetas 

https://www.pexels.com/es-es/  ----> pagina para fotos

https://htmlcolorcodes.com/es/  ----> todos los colores

https://css-tricks.com/pseudo-class-selectors/ ----> pseudo class


 CSS

anatomia de una declaracion


selector {
propiedad: valor;
}

EJEMPLO:

h1{
 color: pink;
}

Tipos de selectores:

Selectores basicos

de tipo	 | div {...}
de clase	 |.elemento{....}	( class)
de id	 |#id-del-elemento
de atributo|a[href""]{...}
universal	 |*{...}


Selectores combinadores

descendientes	 | div p    ----> Cualquier p que este dentro de un div, sin importan si es hijo del hijo del hijo
hijo directo	 |div > p  ----> accederia solo un p que este directamente dentro de un div, si es el "nieto" no se veria afectado
elemento adyacente	 |div + p  ----> se refiere al p que esta inmediatamente debajo del div
general de hermanos|div ~ p  ----> todos los p que esten en la misma "jerarquia" que el div


Tambi√©n podemos ver a las pseudoclases como estados de alg√∫n elemento 
(con el mouse encima, visitado, activo, etc.) y a los pseudoelementos como elementos que escribimos desde CSS,
 por ejemplo, el ::after y el ::before nos puedes funcionar como divs, como su nombre lo dice, son elementos, pero no necesariamente est√°n escritos desde el HTML üëÄ.

pseudoclases y pseudoelementos
:active		::after
:focus		::before
:hover		::first-letter
:nth-child(n)	::placeholder

Especificidad

x 0 0 0 0 !important
   x 0 0 0 estilos en linea
      x 0 0 #id
         x 0 clases, atributos, y pseudoclase
            x  elementos y pseudoelementos
            0 selector universal


En Vscode podemos ver la especificidad de nuestros elementos colocando el cursor sobre el nombre del selector.
	
Display : es el tipo de visualizacion que tiene los elementos.

inline: Estos elementos son los que su caja mide exactamente lo mismo que su contenido. Estos elementos los podemos usar en textos 
y en lugar de que se agreguen en una nueva l√≠nea se agregaran justo al ladito del texto. ‚ùó Tienen como desventaja que no podemos ponerles
 m√°rgenes ni tampoco podemos cambiar su tama√±o.

block: Estos elementos ocupan toda la pantalla, por lo que si quieres agregar otro elemento, este se agregar√° autom√°ticamente abajo. 
No importa que tengas poco contenido, el elemento s√≠ o s√≠ va a ocupar toda la pantalla.

inline-block: Esto mezcla lo mejor de ambos mundos. Con este display podemos tener tanto los
 beneficios de inline como de block, es decir, podemos tener elementos que no ocupen todo el ancho de la pantalla, 
sino que ocupen solamente lo que su contenido ocupa, pero tambi√©n vamos a poder darle m√°rgenes y podremos cambiar su tama√±o 



Flexbox
Flexbox es magia, con Flexbox podemos literal manipular los elementos a como queramos. ¬øAlguna vez has visto el meme de ‚Äúprogramadores sufriendo por centrar un div‚Äù?
 Pues Flexbox rompe ese meme de manera √©pica üòé.
.
Con Flexbox podemos alinear los elementos a como queramos, as√≠ lo queramos a la izquierda, en el centro o a la derecha,
 tanto vertical como horizontalmente, por ejemplo, lo m√°s com√∫n, centrar un elemento:
.

https://css-tricks.com/snippets/css/a-guide-to-flexbox/  ---> guia de flexbox



MODELO DE CAJA 


Esto es un tema muy mindblow ü§Ø. B√°sicamente porque todo en HTML son cajitas, s√≠, incluso un texto es una caja. 
Cuando t√∫ insertas un texto, lo que est√°s haciendo es que est√°s insertando una cajita que adentro tiene texto (y lo mismo aplica para cualquier etiqueta). 
Esta cajita tiene un fondo transparente, pero si t√∫ le pones cualquier fondo usando la propiedad background podr√°s ver esa cajita. Esta cajita, adem√°s de su contenido, 
tiene estas 3 capas externas que ser√≠an el padding, el border y el margin üëá:
.

padding: Es b√°sicamente el espaciado que hay entre la caja y el contenido de la caja, es un espaciado interno. Lo solemos usar mucho para permitir que los elementos ‚Äúrespiren‚Äù,

border: Es el delineado que le podemos dar a una caja, y un borde puede ser tan grueso como quieras. Simplemente debemos ponerle el grosor, el tipo de borde y el color del borde,

margin: Este es b√°sicamente el espaciado entre elementos. Es la distancia que podemos dejar de un elemento hacia otro.

Y para resumir la propiedad box-sizing: border-box; es sencilla: si pones esta propiedad, ekl tama√±o final de tu caja va a ser del width que t√∫ le pongas, si no la pones, 
el tama√±o final de tui caja va a ser del width que t√∫ le pongas m√°s el tama√±o de tu padding, m√°s el de tu borde m√° el de tu margin 

Y de ahora en adelante cuando empieces a desarrollar, notar√°s que muchos usan esto en CSS üëá	
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

B√°sicamente usan el selector universal para aplicarle a toooooodas las etiquetas estas propiedades (es decir, resetean estas propiedades, porque por defecto, el navegador le pone ciertos estilos üòÑ)

COLAPSO DE MARGENES:

sucede cuando:

hay dos elementos bloque adyacentes

no sucede cuando:

flexbox, grid y elementos que no sean bloque 

https://www.exasoluciones.com/inicio/tutoriales/css/columnas-multiples-css