Cuando creen el proyecto con npx create-react-app tengan en cuenta un par de cosas para que no les genere problemas.

	El nombre del directorio no debe tener nombre con Capitalize. 
	Es decir nombres como Curso_React genera problemas, en su lugar usen curso_react


	Por otro lado tengan en cuenta si están instalando node y npm,
 	que la versión de node sea superior a la 10.


Algo que quiero aportar es la estructura del ReactDOM.render(QUE, DONDE)

Quiere decir que como primer parámetro el render recibe el componente que queremos renderizar y el segundo parámetro es donde lo vamos a mostrar

JSX
Esta curiosa sintaxis de etiquetas no es ni un string ni HTML.
.
Se llama JSX, y es una extensión de la sintaxis de JavaScript. Recomendamos usarlo con React para describir cómo debería ser la interfaz de usuario.
 JSX puede recordarte a un lenguaje de plantillas, 
pero viene con todo el poder de JavaScript. JSX produce “elementos” de React.
.
¿Por qué usar JSX?
React acepta el hecho de que la lógica de renderizado está intrínsecamente unida a la lógica de la interfaz de usuario:
 cómo se manejan los eventos, cómo cambia el estado con el tiempo y cómo se preparan los datos para su visualización.
.
En lugar de separar artificialmente tecnologías poniendo el maquetado y la lógica en archivos separados, React separa 
intereses con unidades ligeramente acopladas llamadas “componentes” que contienen ambas.

8.-Manejo del estado
El estado nos permite manejar los valores e información guardada en nuestros componentes de manera que puedan cambiar en el futuro, estos van a cambiar cuando el usuario haga alguna acción.

Vamos a combinar el estado con los eventos para que la app reaccione a las interacciones de los usuarios.

En el componente padre (App) vamos a crear un estado, este estado se lo vamos a pasar por medio de props a 
todos los componentes que llamamos dentro de App, de esta manera logramos que todos los componentes puedan cambiar
 (sin importar en que componente interactúe el usuario) porque escuchan los cambios enviados desde el componente padre.

De esta manera agregamos un estado a nuestros componentes cuando los creamos como funciones

const estado = React.useState();
Se puede hacer también con clases pero en esta ocasión usaremos React Hooks, que son herramientas que empiezan por “use”.
 Es importante que cuando queramos crear un estado en estos componentes que son funciones tenemos que llamar al useState, y el estado inicial se escribe directamente.

useState devuelve un array de dos posiciones, la posición 0 tiene nuestro estado, y la posición 1 tiene una función llamada
 setState (o como queramos llamarla) que nos va a permitir editar nuestro estado. Cuando se actualiza el estado y se llama la función setState lo que ocurre es que se vuelve a renderizar el componente.

const [state, setState] = React.useState("Juan"); 

//state y setState pueden llevar el nombre que queramos
NOTA: React no puede renderizar varias etiquetas en un mismo componente, si no que se necesita una etiqueta que los envuelva a todos o se puede mandar un array.